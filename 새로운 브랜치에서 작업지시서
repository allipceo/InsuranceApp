

### **[과업 지시서] 21회차 시험 연동 기능 구현**

*   **담당자:** 서대리
*   **목표:** `feature/add-exam-21` 브랜치에서 21회차 시험 10문제를 앱에 연동하고, `main` 브랜치에 병합할 준비를 완료한다.
*   **마감 기한:** 즉시

#### **✅ 핵심 성공 원칙 (반드시 준수)**

1.  **데이터 우선 (Data First):** 모든 작업은 실제 마스터 데이터 (`ExamBank_Master_Data_V4.0.xlsx`)에서 직접 추출하는 것으로 시작한다. 임시/가짜/복사된 데이터를 절대 사용하지 않는다.
2.  **검증된 패턴 100% 준수 (Proven Pattern):** 20회차 연동 시 최종 성공했던 방식과 완전히 동일하게 진행한다. '문제+보기'를 분리하는 등 새로운 시도나 불필요한 구조 변경을 절대 하지 않는다.
3.  **단일 작업 집중 (Single Task Focus):** 이번 과업에서는 '21회차 연동'에만 집중한다.

#### **📋 상세 작업 절차 (Step-by-Step)**

**1단계: 데이터 추출 및 생성 (가장 중요)**
1.  `extract_data.py` 스크립트를 실행하여 `ExamBank_Master_Data_V4.0.xlsx` 파일에서 **21회차** 시험 문제 10개 (IBEX_ID: `IBEX_21_001` ~ `IBEX_21_010`)를 추출한다.
2.  추출된 데이터를 `simple-data-21-10.json` 파일명으로 저장한다.
3.  **[중간 보고 1]** `simple-data-21-10.json` 파일의 내용을 확인하여, 기존 `simple-data-20-10.json`과 데이터 구조(key, value 형식 등)가 100% 동일한지 확인 후 보고한다.

**2단계: 프론트엔드 연동**
1.  `index.html` 파일을 연다.
2.  홈 화면의 회차 선택 영역에 **'21회' 버튼을 추가**하고, 다른 활성화된 버튼(20, 22, 23, 24회)과 동일한 파란색 스타일을 적용한다.
3.  '21회' 버튼 클릭 시 `loadQuestions(21)` 함수가 호출되도록 `onclick` 이벤트를 연결한다. 기존 `loadQuestions` 함수의 로직은 절대 수정하지 않는다.

**3단계: 기능 검증**
1.  로컬 서버(`python -m http.server 8000`)를 실행한다.
2.  웹 브라우저에서 다음의 모든 항목을 남김없이 테스트한다.
    *   **[성공 기준 1]** 홈 화면에 '21회' 버튼이 파란색으로 정상 표시되는가?
    *   **[성공 기준 2]** '21회' 버튼 클릭 시, "21회 보험중개사 시험 (문제 1/10)"이 표시되며 문제 풀이 화면으로 정확히 이동하는가?
    *   **[성공 기준 3]** 10개의 문제가 정상적으로 표시되고, 정답/오답 판정, 다음 문제 넘기기 등 모든 기능이 완벽하게 작동하는가?
    *   **[성공 기준 4]** 최종 결과 화면이 통계와 함께 정상적으로 표시되는가?
    *   **[성공 기준 5]** '홈으로' 버튼을 눌렀을 때 모든 상태가 완전히 초기화되는가?
    *   **[성공 기준 6]** 다른 회차(20, 22, 23, 24회) 기능이 이전과 동일하게 완벽히 작동하는가? (회귀 테스트)
3.  **[중간 보고 2]** 위의 모든 테스트가 성공적으로 완료되었음을 보고한다.

**4단계: 완료 및 보고**
1.  모든 코드 변경 사항을 커밋한다.
2.  `main` 브랜치로 병합할 준비가 되었음을 최종 보고한다.

---

이제 조대표님께서 `feature/add-exam-21` 브랜치를 생성해 주시면, 제가 위 지시서에 따라 한 치의 오차도 없이 과업을 시작하겠습니다.