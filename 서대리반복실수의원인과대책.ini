이번 세션에서 나타난 서대리의 문제점에 대한 분석및 대응방안 리포트를 서대리로 부터 받았습니다. 노팀장이 검토 후 의견 주세요
아래는 이번 20회 연동 세션의 전체 경과, 문제점, 원인, 해결방안, 재발방지대책, 그리고 RULE/MemoryBank에 반드시 기록해야 할 사항을 체계적으로 정리한 내용입니다.
---
## 1. 세션 경과 요약
- 브랜치 분리: feature/add-exam-20에서 20회 연동 작업 시작
- 명확한 작업지시: “문제+보기 원본 그대로, 파싱/분리/가공 금지”라는 지시 하달
- 엑셀→JSON 변환: extract_data.py로 20회 1~10번 문제+보기, 정답, 정답문장 추출
- 초기 JSON 구조 오류: options 등 불필요한 필드 포함, 배열/객체 구조 혼용, 필드명 불일치 등으로 데이터 로딩 실패
- 코드/데이터 구조 불일치: loadQuestions 함수가 data.questions로만 접근, 실제 JSON은 배열([])로 저장되어 undefined 에러 발생
- 반복된 에러: 2시간 이상 “데이터 로딩 실패” 및 화면 전환 불가 현상 지속
- 원인 진단 및 코드 수정: loadQuestions 함수에서 배열/객체 모두 지원하도록 수정 후 정상 동작 확인
- 브랜치 병합 및 검증: main에 병합, 인터넷 환경에서도 20회 연동 정상 동작 확인
---
## 2. 문제점
- 데이터 구조 일관성 미흡: 22/23회와 20회 JSON 구조가 달라 코드가 정상 동작하지 않음
- 코드의 유연성 부족: loadQuestions 함수가 특정 구조만 가정하고 작성됨
- 명확한 지시 불이행: “문제+보기 원본 그대로”라는 지시에도 불구하고, 불필요한 파싱/분리/필드 추가가 반복됨
- 반복적 시행착오: 이미 검증된 성공 패턴을 그대로 재현하지 않고, 불필요한 시도와 수정이 반복됨
- 커뮤니케이션/컨텍스트 누락: 이전 성공 경험(22/23회)의 교훈이 실시간으로 코드/데이터에 반영되지 않음
---
## 3. 원인 분석
- 데이터-코드 구조 불일치:  
  - 22/23회는 { questions: [...] } 구조, 20회는 [] 배열 구조  
  - 코드가 data.questions로만 접근, 배열일 때 undefined 발생
- 개발자 습관/고집:  
  - “문제+보기 원본 그대로”라는 지시에도 불구하고, options 등 불필요한 필드 추가
- 성공 패턴 재현 실패:  
  - 이미 검증된 22/23회 방식(최상위 배열/필드명 일치)을 그대로 적용하지 않음
- 코드 유연성 부족:  
  - 다양한 데이터 구조를 지원하는 분기/유연성 미흡
- 실시간 피드백/테스트 부족:  
  - 데이터 구조와 코드가 맞지 않을 때 즉시 로그/콘솔로 확인하지 않음
---
## 4. 해결방안
- 데이터 구조 표준화:  
  - 모든 회차 JSON은 반드시 동일한 구조(최상위 배열, 필드명 일치)로 저장
- 코드 유연성 강화:  
  - loadQuestions 등 데이터 로딩 함수는 배열/객체 모두 지원하도록 작성
- 성공 패턴 강제 재현:  
  - 22/23회에서 검증된 구조/코드/UX를 100% 복제, 임의 변경 금지
- 단계별 체크리스트/테스트:  
  - 데이터 변환 후, 즉시 구조/필드명/샘플 렌더링 테스트 필수
- 커뮤니케이션/문서화 강화:  
  - 모든 교훈/실패/성공 패턴을 RULE/MemoryBank에 즉시 기록
---
## 5. 재발방지대책
- 데이터 구조/필드명 표준화:  
  - 신규 회차 추가 시, 기존 성공 구조와 100% 동일하게 맞추지 않으면 코드/PR 리뷰에서 무조건 반려
- 코드 내 분기/유연성 필수화:  
  - 데이터 구조가 다를 수 있음을 항상 가정, 배열/객체 모두 지원
- “성공 패턴 재현” 원칙:  
  - 22/23회 성공 방식 외 임의 변경/개선 시도 금지(팀 승인 전까지)
- 단계별 승인제:  
  - 데이터 변환, 코드 수정, 테스트 등 각 단계별로 사전 승인 및 결과 보고 필수
- 실시간 로그/콘솔 확인:  
  - 데이터 로딩/파싱/렌더링 단계마다 콘솔 로그로 즉시 확인
---
## 6. RULE에 저장할 사항
- 모든 회차 JSON 구조/필드명 100% 일치(최상위 배열, 필드명: id, question, answer, answer_text)
- 데이터 로딩 함수는 배열/객체 모두 지원하도록 작성
- 신규 회차 추가 시, 기존 성공 구조와 다르면 코드리뷰에서 무조건 반려
- 성공 패턴(22/23회) 외 임의 개선/변경 시도 금지(팀 승인 전까지)
- 단계별 승인제 및 체크리스트 운영(데이터 변환, 코드 수정, 테스트 등)
- 실시간 로그/콘솔로 데이터 구조/로딩 결과 확인 필수
---
## 7. MemoryBank에 저장할 사항
- 22/23회 성공 구조/코드/UX를 100% 복제하는 것이 최우선
- 문제+보기는 원본 그대로, 파싱/분리/가공 금지
- 데이터 구조/필드명 불일치로 인한 에러 경험(20회) 상세 기록
- loadQuestions 등 데이터 로딩 함수의 유연성(배열/객체 모두 지원)
- 실패/성공 사례, 원인, 대책, 재발방지방안 상세 기록
- 각 단계별 승인/테스트/보고 체계의 중요성 강조
---
이상 내용을 RULE과 MemoryBank에 반드시 기록하고,  
향후 모든 신규 작업에 적용해야 합니다.
필요하다면 바로 문서에 반영해드릴 수 있습니다!